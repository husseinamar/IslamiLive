<!DOCTYPE html>
<html class="h-full">

<head>
    <script>
        const categoryJSON = `<%- categoryJSON %>`;
        const category = JSON.parse(categoryJSON.replaceAll('\n', '\\n'));
        document.title = `${category.name} | IslamiLive`;
    </script>

    <script>
        class ObservableMapChangeEvent extends Event {
            constructor(observable, key, oldValue, newValue) {
                super('change');
                this.observable = observable;
                this.key = key;
                this.oldValue = oldValue;
                this.newValue = newValue;
            }
        }

        class ObservableMap extends Map {
            constructor(iterable) {
                super(iterable);
                this._eventTarget = new EventTarget();
            }

            on(name, listener, options) {
                this._eventTarget.addEventListener(name, listener, options);
            }

            off(name, listener, options) {
                this._eventTarget.addEventListener(name, listener, options);
            }

            delete(key) {
                this._eventTarget.dispatchEvent(new ObservableMapChangeEvent(this, key, this.get(key), undefined));
                super.delete(key);
            }
            set(key, value) {
                this._eventTarget.dispatchEvent(new ObservableMapChangeEvent(this, key, this.get(key), value));
                super.set(key, value);
            }
        }
    </script>
</head>

<link rel="stylesheet" href="/css/style.css">

<body class="h-full">

    <!-- Begin of Dashboard Layout -->
    <div>
        <!-- Static sidebar for desktop -->
        <div class="hidden lg:fixed lg:inset-y-0 lg:flex lg:w-64 lg:flex-col">
            <!-- Sidebar component, swap this element with another sidebar if you like -->
            <div class="flex min-h-0 flex-1 flex-col border-r border-gray-200 bg-white">
                <div class="flex flex-1 flex-col overflow-y-auto pt-5 pb-4">
                    <div class="flex flex-shrink-0 items-center px-4">
                        <img class="h-8 w-auto mr-3"
                            src="https://tailwindui.com/img/logos/mark.svg?color=indigo&shade=600" alt="Al-Irschad">
                        <span>IslamiLive</span>
                    </div>
                    <nav class="mt-5 flex-1 space-y-1 bg-white px-2">
                        <!-- Current: "bg-gray-100 text-gray-900", Default: "text-gray-600 hover:bg-gray-50 hover:text-gray-900" -->
                        <a href="#"
                            class="bg-gray-100 text-gray-900 group flex items-center rounded-md px-2 py-2 text-sm font-medium">
                            <!-- Current: "text-gray-500", Default: "text-gray-400 group-hover:text-gray-500" -->
                            <svg class="text-gray-400 group-hover:text-gray-500 mr-3 h-6 w-6 flex-shrink-0" fill="none"
                                viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round"
                                    d="M2.25 12.75V12A2.25 2.25 0 014.5 9.75h15A2.25 2.25 0 0121.75 12v.75m-8.69-6.44l-2.12-2.12a1.5 1.5 0 00-1.061-.44H4.5A2.25 2.25 0 002.25 6v12a2.25 2.25 0 002.25 2.25h15A2.25 2.25 0 0021.75 18V9a2.25 2.25 0 00-2.25-2.25h-5.379a1.5 1.5 0 01-1.06-.44z" />
                            </svg>
                            Quiz
                        </a>
                    </nav>
                </div>
                <div class="flex flex-shrink-0 border-t border-gray-200 p-4">
                    <a href="#" class="group block w-full flex-shrink-0">
                        <div class="flex items-center">
                            <div>
                                <img class="inline-block h-9 w-9 rounded-full"
                                    src="https://images.unsplash.com/photo-1635107510862-53886e926b74?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"
                                    alt="">
                            </div>
                            <div class="ml-3">
                                <p class="text-sm font-medium text-gray-700 group-hover:text-gray-900">Al-Irschad</p>
                                <p class="text-xs font-medium text-gray-500 group-hover:text-gray-700">View profile</p>
                            </div>
                        </div>
                    </a>
                </div>
            </div>
        </div>

        <div class="flex flex-1 flex-col lg:pl-64">
            <main class="flex-1">
                <div class="pb-6">
                    <div class="sticky top-0 right-0 flex justify-between flex-1 bg-white mx-auto max-w-7xl py-6 px-4 sm:px-6 lg:px-8">
                        <div class="flex items-center">
                            <div class="flex items-center mr-3 text-xs text-gray-500 cursor-pointer" onClick="event.stopPropagation(); window.location = window.location.href.split('/category')[0];">
                                <svg class="h-5 w-5 text-gray-400 rotate-180"
                                    viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                    <path fill-rule="evenodd"
                                        d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z"
                                        clip-rule="evenodd" />
                                </svg>
                                <span>Zur√ºck</span>
                            </div>
                            <h1 id="page-heading" name="page-heading" class="text-2xl font-semibold text-gray-900"><%- category.name %></h1>
                        </div>
                        <div class="flex">
                            <button onClick="importQuestionsModal()" type="button"
                                class="flex items-center rounded-md border border-indigo-600 px-3 py-2 mr-2 text-sm font-semibold text-indigo-600 shadow-sm hover:bg-indigo-500 hover:text-white focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                                <svg class="-ml-0.5 mr-1.5 h-5 w-5" viewBox="0 0 20 20" fill="currentColor"
                                    aria-hidden="true">
                                    <path
                                        d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z" />
                                </svg>
                                Fragen importieren
                            </button>
                            <button onClick="createNewQuestionModal()" type="button"
                                class="flex items-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                                <svg class="-ml-0.5 mr-1.5 h-5 w-5" viewBox="0 0 20 20" fill="currentColor"
                                    aria-hidden="true">
                                    <path
                                        d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z" />
                                </svg>
                                Neue Frage
                            </button>
                        </div>
                    </div>
                    <div id="content" class="mx-auto max-w-7xl px-4 pt-5 sm:px-6 lg:px-8">
                        <!-- Start of content -->
                        
                        <!-- End of content -->
                    </div>
                </div>
            </main>
        </div>
    </div>
    <!-- End of Dashboard Layout -->

    <script>
        const contentDiv = document.getElementById('content');
        const questions = new ObservableMap();
        const questionElements = new ObservableMap();
        let questionCounter = 0;

        questionElements.on('change', event => {
            if (event.newValue) {
                contentDiv.appendChild(event.newValue);
                return;
            }

            // remove list element from contentDiv
            if (!event.newValue) {
                contentDiv.removeChild(event.oldValue);
            }
        });

        questions.on('change', event => {
            console.log('newValue:', event.newValue);

            if ( event.newValue && questionElements.size === 0 ) {
                contentDiv.innerHTML = '';
            }

            if (event.newValue) {
                const listElement = createQuestionElement(event.newValue);
                questionElements.set(`${event.newValue.id}`, listElement);
                return;
            }

            if (!event.newValue && event.oldValue) {
                questionElements.delete(`${event.oldValue.id}`);
            }

            if (questionElements.size === 0) {
                createEmptyState();
                return;
            }
        })

        const loadQuestions = async () => {
            // const pageHeading = document.getElementById("page-heading");
            // pageHeading.innerText = `<%- category.name %> - Fragen`;

            for (const question of category.questions) {
                questions.set(`${question.id}`, { ...question });
            }
        }

        const setup = async () => {
            await loadQuestions();

            if (questions?.size > 0) {
                return;
            }

            createEmptyState();
        }

        const createEmptyState = () => {
            contentDiv.innerHTML = `
                        <div id="empty_content" class="mt-[15vh] text-center">
                            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                                <path vector-effect="non-scaling-stroke" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 13h6m-3-3v6m-9 1V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2z" />
                            </svg>
                            <h3 class="mt-2 text-sm font-semibold text-gray-900">Keine Fragen</h3>
                            <p class="mt-1 text-sm text-gray-500">Starte jetzt mit einer neuen Frage.</p>
                            <div class="mt-6">
                                <button onClick="createNewQuestionModal()" type="button" class="inline-flex items-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                                    <svg class="-ml-0.5 mr-1.5 h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                        <path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z" />
                                    </svg>
                                    Neue Frage
                                </button>
                            </div>
                        </div>`;
        }

        const createNewQuestionModal = () => {
            const newQuestionModal = document.createElement('div');
            newQuestionModal.setAttribute('id', 'new-question-modal');
            newQuestionModal.setAttribute('name', 'new-question-modal');
            newQuestionModal.setAttribute('class', 'relative z-10');
            newQuestionModal.setAttribute('aria-labelledby', 'modal-title');
            newQuestionModal.setAttribute('role', 'dialog');
            newQuestionModal.setAttribute('aria-modal', 'true');

            const newQuestionModalBackgroundDrop = document.createElement('div');
            newQuestionModalBackgroundDrop.setAttribute('id', 'new-question-modal-background-drop');
            newQuestionModalBackgroundDrop.setAttribute('name', 'new-question-modal-background-drop');
            newQuestionModalBackgroundDrop.setAttribute('class', 'ease-out duration-300 opacity-0 fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity');

            const newQuestionModalPanelMainContainer = document.createElement('div');
            newQuestionModalPanelMainContainer.setAttribute('class', 'fixed inset-0 z-10 overflow-y-auto');

            const newQuestionModalPanelParentContainer = document.createElement('div');
            newQuestionModalPanelParentContainer.setAttribute('class', 'flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0');

            const newQuestionModalPanel = document.createElement('div');
            newQuestionModalPanel.setAttribute('id', 'new-question-modal-panel');
            newQuestionModalPanel.setAttribute('name', 'new-question-modal-panel');
            newQuestionModalPanel.setAttribute('class', 'ease-out duration-300 opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95 relative transform overflow-hidden rounded-lg bg-white px-4 pt-5 pb-4 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6');
            newQuestionModalPanel.innerHTML = `
                <div>
                    <div class="mt-3 text-center sm:mt-5">
                        <h3 class="text-base font-semibold leading-6 text-gray-900"
                            id="modal-title">Neue Frage Erstellen</h3>

                        <div class="my-6">
                            <p class="mt-2 text-sm text-gray-500" id="question-name-description">Gib der Frage einen Namen</p>
                            <div class="mt-2">
                                <input type="text" name="question-name" id="question-name" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" placeholder="Beispiel Frage" aria-describedby="question-name-description">
                            </div>
                        </div>

                    </div>
                </div>

                <div
                    class="mt-5 sm:mt-6 sm:grid sm:grid-flow-row-dense sm:grid-cols-2 sm:gap-3">
                    <button type="button" aria-busy="false" type="button" id="new-question-submit-button" name="new-question-submit-button"
                        class="inline-flex w-full justify-center rounded-md bg-indigo-600 disabled:bg-indigo-400 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 disabled:hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 disabled:cursor-not-allowed sm:col-start-2"
                    >
                        <svg id="new-question-submit-button-spinner" aria-hidden="true" role="status" class="hidden aria-[hidden=false]:inline w-4 h-4 mr-3 text-white animate-spin" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path
                                d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
                                fill="#E5E7EB"
                            />
                            <path
                                d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
                                fill="currentColor"
                            />
                        </svg>
                        Erstellen
                    </button>
                    <button type="button" onclick="closeNewQuestionModal()"
                        class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:col-start-1 sm:mt-0">Abbrechen</button>
                </div>
            `;

            newQuestionModalPanelParentContainer.appendChild(newQuestionModalPanel);
            newQuestionModalPanelMainContainer.appendChild(newQuestionModalPanelParentContainer);

            newQuestionModal.appendChild(newQuestionModalBackgroundDrop);
            newQuestionModal.appendChild(newQuestionModalPanelMainContainer);

            document.body.appendChild(newQuestionModal);

            newQuestionModalPanel.classList.remove('opacity-0', 'translate-y-4', 'sm:translate-y-0', 'sm:scale-95');
            newQuestionModalPanel.classList.add('opacity-100', 'translate-y-0', 'sm:scale-100');

            newQuestionModalBackgroundDrop.classList.remove('opacity-0');
            newQuestionModalBackgroundDrop.classList.add('opacity-100');

            const newQuestionSubmitButton = document.getElementById('new-question-submit-button');
            newQuestionSubmitButton.addEventListener('click', (e) => {
                e.stopPropagation();
                e.preventDefault();


                if (newQuestionSubmitButton.getAttribute('aria-busy') === 'true') {
                    return;
                }

                setSubmitting('new-question-submit-button', 'true');
                createNewQuestionHandler({ question: document.getElementById('question-name')?.value });
            });
        }

        const closeNewQuestionModal = () => {
            const newQuestionModal = document.getElementById('new-question-modal');
            const newQuestionModalPanel = document.getElementById('new-question-modal-panel');
            const newQuestionModalBackgroundDrop = document.getElementById('new-question-modal-background-drop');

            // undo the animations added when creating
            newQuestionModalPanel.classList.remove('ease-out', 'duration-300');
            newQuestionModalPanel.classList.remove('opacity-100', 'translate-y-0', 'sm:scale-100');

            newQuestionModalBackgroundDrop.classList.remove('ease-out', 'duration-300');
            newQuestionModalBackgroundDrop.classList.remove('opacity-100');

            newQuestionModalPanel.classList.add('ease-in', 'duration-200', 'opacity-0', 'translate-y-4', 'sm:translate-y-0', 'sm:scale-95');
            newQuestionModalBackgroundDrop.classList.add('ease-in', 'duration-200', 'opacity-0');

            // newQuestionModalPanel.classList.add('opacity-0', 'translate-y-4', 'sm:translate-y-0', 'sm:scale-95');
            // newQuestionModalBackgroundDrop.classList.add('opacity-0');

            // clean up DOM
            setTimeout(() => newQuestionModal.remove(), 200);
        }

        const importQuestionsModal = () => {
            const newQuestionModal = document.createElement('div');
            newQuestionModal.setAttribute('id', 'import-questions-modal');
            newQuestionModal.setAttribute('name', 'import-questions-modal');
            newQuestionModal.setAttribute('class', 'relative z-10');
            newQuestionModal.setAttribute('aria-labelledby', 'modal-title');
            newQuestionModal.setAttribute('role', 'dialog');
            newQuestionModal.setAttribute('aria-modal', 'true');

            const newQuestionModalBackgroundDrop = document.createElement('div');
            newQuestionModalBackgroundDrop.setAttribute('id', 'import-questions-modal-background-drop');
            newQuestionModalBackgroundDrop.setAttribute('name', 'import-questions-modal-background-drop');
            newQuestionModalBackgroundDrop.setAttribute('class', 'ease-out duration-300 opacity-0 fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity');

            const newQuestionModalPanelMainContainer = document.createElement('div');
            newQuestionModalPanelMainContainer.setAttribute('class', 'fixed inset-0 z-10 overflow-y-auto');

            const newQuestionModalPanelParentContainer = document.createElement('div');
            newQuestionModalPanelParentContainer.setAttribute('class', 'flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0');

            const newQuestionModalPanel = document.createElement('div');
            newQuestionModalPanel.setAttribute('id', 'import-questions-modal-panel');
            newQuestionModalPanel.setAttribute('name', 'import-questions-modal-panel');
            newQuestionModalPanel.setAttribute('class', 'ease-out duration-300 opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95 relative transform overflow-hidden rounded-lg bg-white px-4 pt-5 pb-4 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6');
            newQuestionModalPanel.innerHTML = `
                <div>
                    <div class="mt-3 text-center sm:mt-5">
                        <h3 class="text-base font-semibold leading-6 text-gray-900" id="modal-title">Fragen importieren</h3>
                        <div class="my-6">
                            <p class="mt-1 text-sm text-gray-500" id="question-name-description">Regeln<br>
                                1. Die erste Zeile muss direkt eine Frage sein.<br>
                                2. Zwischen jeder Frage und ihren Antworten muss eine leere Zeile sein.<br>
                                3. Jede Antwort M√∂glichkeit mit einem '- ' beginnen.<br>
                                4. Jede Antwortm√∂glichkeit soll auf einer Zeile sein<br>
                                5. Zwischen den Antwortm√∂glichkeiten darf keine leere Zeile sein<br>
                                6. Die richtige Antwort endet mit 'üëç' oder '‚úÖÔ∏è'
                                7. Zwsichen den Antwortm√∂glichkeiten einer Frage und der n√§chsten Frage muss eine leere Zeile sein.<br>
                                8. Die letzte Zeile im Text muss die letzte Antwortm√∂glichkeit der letzten Frage sein.
                            </p>
                            <div class="mt-2">
                                <textarea
                                    rows="8"
                                    type="text"
                                    name="import-questions-string" id="import-questions-string"
                                    aria-describedby="question-name-description"
                                    class="block w-full resize-none rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                                    placeholder="Beispiel:\n1- Wann ist Eid Al-Fitr?\n\n1- Am Ersten des Monats Dhul-Hidscha\n2- Am Ersten des Monats Shawwal ‚úÖÔ∏è\n3- Am Ersten des Monats Dhul-Qada\n\n2- Wann begann die Verteidigungsschlacht von Badr?\n\n1 - 13. Ramadan\n2 - 17. Ramadan‚úÖÔ∏è\n3 - 19. Ramadan"
                                ></textarea>
                            </div>
                        </div>

                    </div>
                </div>

                <div
                    class="mt-5 sm:mt-6 sm:grid sm:grid-flow-row-dense sm:grid-cols-2 sm:gap-3">
                    <button type="button" aria-busy="false" type="button" id="import-questions-submit-button" name="import-questions-submit-button"
                        class="inline-flex w-full justify-center rounded-md bg-indigo-600 disabled:bg-indigo-400 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 disabled:hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 disabled:cursor-not-allowed sm:col-start-2"
                    >
                        <svg id="import-questions-submit-button-spinner" aria-hidden="true" role="status" class="hidden aria-[hidden=false]:inline w-4 h-4 mr-3 text-white animate-spin" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path
                                d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
                                fill="#E5E7EB"
                            />
                            <path
                                d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
                                fill="currentColor"
                            />
                        </svg>
                        Erstellen
                    </button>
                    <button type="button" onclick="closeImportQuestionsModal()"
                        class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:col-start-1 sm:mt-0">Abbrechen</button>
                </div>
            `;

            newQuestionModalPanelParentContainer.appendChild(newQuestionModalPanel);
            newQuestionModalPanelMainContainer.appendChild(newQuestionModalPanelParentContainer);

            newQuestionModal.appendChild(newQuestionModalBackgroundDrop);
            newQuestionModal.appendChild(newQuestionModalPanelMainContainer);

            document.body.appendChild(newQuestionModal);

            newQuestionModalPanel.classList.remove('opacity-0', 'translate-y-4', 'sm:translate-y-0', 'sm:scale-95');
            newQuestionModalPanel.classList.add('opacity-100', 'translate-y-0', 'sm:scale-100');

            newQuestionModalBackgroundDrop.classList.remove('opacity-0');
            newQuestionModalBackgroundDrop.classList.add('opacity-100');

            const newQuestionSubmitButton = document.getElementById('import-questions-submit-button');
            newQuestionSubmitButton.addEventListener('click', (e) => {
                e.stopPropagation();
                e.preventDefault();


                if (newQuestionSubmitButton.getAttribute('aria-busy') === 'true') {
                    return;
                }

                setSubmitting('import-questions-submit-button', 'true');
                console.log(document.getElementById('import-questions-string')?.value);
                handleCreateQuestionsFromImport(document.getElementById('import-questions-string')?.value);
            });
        }

        const closeImportQuestionsModal = () => {
            const newQuestionModal = document.getElementById('import-questions-modal');
            const newQuestionModalPanel = document.getElementById('import-questions-modal-panel');
            const newQuestionModalBackgroundDrop = document.getElementById('import-questions-modal-background-drop');

            // undo the animations added when creating
            newQuestionModalPanel.classList.remove('ease-out', 'duration-300');
            newQuestionModalPanel.classList.remove('opacity-100', 'translate-y-0', 'sm:scale-100');

            newQuestionModalBackgroundDrop.classList.remove('ease-out', 'duration-300');
            newQuestionModalBackgroundDrop.classList.remove('opacity-100');

            newQuestionModalPanel.classList.add('ease-in', 'duration-200', 'opacity-0', 'translate-y-4', 'sm:translate-y-0', 'sm:scale-95');
            newQuestionModalBackgroundDrop.classList.add('ease-in', 'duration-200', 'opacity-0');

            // newQuestionModalPanel.classList.add('opacity-0', 'translate-y-4', 'sm:translate-y-0', 'sm:scale-95');
            // newQuestionModalBackgroundDrop.classList.add('opacity-0');

            // clean up DOM
            setTimeout(() => newQuestionModal.remove(), 200);
        }

        const createNewQuestionHandler = async (entry) => {
            if (!entry?.question?.trim()) {
                setSubmitting('new-question-submit-button', 'false');
                alert('Gib bitte erst einen Namen f√ºr die Frage ein!');
                return;
            }

            console.log('creating new question');

            let createResponse;
            try {
                createResponse = await fetch(`${window.location.protocol}//${window.location.host}/api/quiz/<%- quizId %>/category/<%- category.id %>/question`, {
                    method: 'POST',
                    headers: {
                        "Content-Type": "application/json",
                    },

                    body: JSON.stringify({
                        questions: [
                            {
                                question: entry.question,
                                type: "multiple_choice",
                                numCorrectAnswers: 0,
                            }
                        ],
                    })
                });

                const jsonResponse = await createResponse?.json();
                const newQuestions = jsonResponse?.data;

                if (!newQuestions) {
                    alert('Etwas ist schief gelaufen. Mach einen Screenshot und kontaktiere bitte Hussein Amar');
                    return;
                }

                questions.set(`${newQuestions[0].id}`, { ...newQuestions[0] });

            } catch (error) {
                console.log(error);
                return;
            }

            closeNewQuestionModal();
        }

        const importQuestionHandler = async (entry) => {
            if (!entry?.question?.trim()) {
                setSubmitting('import-questions-submit-button', 'false');
                console.log('Gib bitte erst einen Namen f√ºr die Frage ein!', entry);
                return;
            }

            console.log('creating new question');

            let createResponse;
            try {
                createResponse = await fetch(`${window.location.protocol}//${window.location.host}/api/quiz/<%- quizId %>/category/<%- category.id %>/question`, {
                    method: 'POST',
                    headers: {
                        "Content-Type": "application/json",
                    },

                    body: JSON.stringify({
                        questions: [
                            {
                                question: entry.question,
                                type: "multiple_choice",
                                numCorrectAnswers: entry?.answerPossibilities?.filter((possibility) => possibility.isCorrect === true)?.length ?? 0,
                                answerPossibilities: [...entry?.answerPossibilities],
                            }
                        ],
                    })
                });

                const jsonResponse = await createResponse?.json();
                const newQuestions = jsonResponse?.data;

                if (!newQuestions) {
                    console.log('Etwas ist schief gelaufen. Mach einen Screenshot und kontaktiere bitte Hussein Amar');
                    return;
                }

                console.log('newQuestions', newQuestions);

                questions.set(`${newQuestions[0].id}`, { ...newQuestions[0] });

            } catch (error) {
                console.log(error);
                return;
            }
        }

        const createQuestionElement = (question) => {
            // create a container to hold the unsorted list
            const questionContainerElement = document.createElement('div');
            questionContainerElement.setAttribute('id', `question-${question.id}`);
            questionContainerElement.setAttribute('data-list-id', `${question.id}`);
            questionContainerElement.setAttribute('class', 'overflow-hidden bg-white mb-16 shadow sm:rounded-md');

            // create an unsorted list to hold the question and answer choices
            const questionUnsortedList = document.createElement('ul');
            questionUnsortedList.setAttribute('id', `ul-${question.id}`);
            questionUnsortedList.setAttribute('data-list-id', `${question.id}`);
            questionUnsortedList.setAttribute('aria-expanded', `false`);
            questionUnsortedList.setAttribute('class', 'group/ul divide-y divide-gray-200');
            
            // create the list element that holds the question itself
            const questionElement = document.createElement('li');
            questionElement.setAttribute('aria-expanded', `false`);
            questionElement.setAttribute('class', 'group/question block bg-white hover:bg-gray-50 cursor-pointer');
            questionElement.setAttribute('onclick', `const ulElement = document.getElementById('ul-${question.id}'); const currentState = ulElement.getAttribute('aria-expanded') === 'true'; ulElement.setAttribute('aria-expanded', !currentState); this.setAttribute('aria-expanded', !currentState)`);
            questionElement.innerHTML = `
                <div class="border-b border-gray-200 px-4 py-5 sm:px-6">
                    <div
                        class="-ml-4 -mt-4 flex flex-wrap items-center justify-between sm:flex-nowrap">
                        <div class="ml-4 mt-4">
                            <div class="flex items-center">
                                <div class="ml-4">
                                    <h3 class="text-base font-semibold leading-6 text-gray-900 whitespace-pre-line">${++questionCounter}. ${question?.question}</h3>
                                </div>
                            </div>
                        </div>
                        <div class="ml-4 mt-4 flex flex-shrink-0">
                            <button type="button" onclick="event.stopPropagation()"
                                class="group/delete inline-flex items-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-red-500 shadow-sm ring-1 ring-inset ring-red-500 hover:bg-red-400 hover:text-white">
                                <svg class="-ml-0.5 mr-1.5 h-5 w-5 text-red-500 group-hover/delete:text-white"
                                    xmlns="http://www.w3.org/2000/svg" fill="none"
                                    viewBox="0 0 24 24" stroke-width="1.5"
                                    stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round"
                                        d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0" />
                                </svg>
                                <span>L√∂schen</span>
                            </button>
                            <button type="button" onclick="event.stopPropagation()"
                                class="ml-3 inline-flex items-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-slate-300 hover:bg-slate-200">
                                <svg class="-ml-0.5 mr-1.5 h-5 w-5 text-gray-400"
                                    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
                                    fill="currentColor" class="w-6 h-6">
                                    <path
                                        d="M21.731 2.269a2.625 2.625 0 00-3.712 0l-1.157 1.157 3.712 3.712 1.157-1.157a2.625 2.625 0 000-3.712zM19.513 8.199l-3.712-3.712-8.4 8.4a5.25 5.25 0 00-1.32 2.214l-.8 2.685a.75.75 0 00.933.933l2.685-.8a5.25 5.25 0 002.214-1.32l8.4-8.4z" />
                                    <path
                                        d="M5.25 5.25a3 3 0 00-3 3v10.5a3 3 0 003 3h10.5a3 3 0 003-3V13.5a.75.75 0 00-1.5 0v5.25a1.5 1.5 0 01-1.5 1.5H5.25a1.5 1.5 0 01-1.5-1.5V8.25a1.5 1.5 0 011.5-1.5h5.25a.75.75 0 000-1.5H5.25z" />
                                </svg>


                                <span>Bearbeiten</span>
                            </button>
                            <div class="ml-3 py-2">
                                <svg class="h-5 w-5 text-gray-400 group-aria-[expanded=true]/question:rotate-90 group-aria-[expanded=false]/question:rotate-[270deg]"
                                    viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                    <path fill-rule="evenodd"
                                        d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z"
                                        clip-rule="evenodd" />
                                </svg>
                            </div>
                        </div>
                    </div>
                </div>
            `;

            // add the question element (li) to the ul
            questionUnsortedList.appendChild(questionElement);
            
            // create the answer possibilities
            question?.answerPossibilities?.forEach(possibility => {
                const answerElement = document.createElement('li');
                answerElement.setAttribute('class', 'group-aria-[expanded=true]/ul:block group-aria-[expanded=false]/ul:hidden');
                answerElement.innerHTML = `
                    <div class="flex items-center px-4 py-4 sm:px-6">
                        <div class="flex min-w-0 flex-1 items-center">
                            <div
                                class="min-w-0 flex-1 px-4 md:grid md:grid-cols-2 md:gap-4">
                                <div>
                                    <p class="truncate text-sm font-medium text-gray-900 whitespace-pre-line">${possibility.value}</p>
                                </div>
                                <div class="hidden md:block">
                                    <div>
                                        <p class="flex items-center text-sm text-gray-500">
                                            ${possibility.isCorrect === true ? 'Richtig' : 'Falsch'}
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="flex flex-shrink-0">
                            <button type="button" onclick="event.stopPropagation()"
                                class="group/delete inline-flex items-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-red-500 shadow-sm ring-1 ring-inset ring-red-500 hover:bg-red-400 hover:text-white">
                                <svg class="-ml-0.5 mr-1.5 h-5 w-5 text-red-500 group-hover/delete:text-white"
                                    xmlns="http://www.w3.org/2000/svg" fill="none"
                                    viewBox="0 0 24 24" stroke-width="1.5"
                                    stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round"
                                        d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0" />
                                </svg>
                                <span>L√∂schen</span>
                            </button>
                            <button type="button" onclick="event.stopPropagation()"
                                class="ml-3 inline-flex items-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-slate-300 hover:bg-slate-200">
                                <svg class="-ml-0.5 mr-1.5 h-5 w-5 text-gray-400"
                                    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
                                    fill="currentColor" class="w-6 h-6">
                                    <path
                                        d="M21.731 2.269a2.625 2.625 0 00-3.712 0l-1.157 1.157 3.712 3.712 1.157-1.157a2.625 2.625 0 000-3.712zM19.513 8.199l-3.712-3.712-8.4 8.4a5.25 5.25 0 00-1.32 2.214l-.8 2.685a.75.75 0 00.933.933l2.685-.8a5.25 5.25 0 002.214-1.32l8.4-8.4z" />
                                    <path
                                        d="M5.25 5.25a3 3 0 00-3 3v10.5a3 3 0 003 3h10.5a3 3 0 003-3V13.5a.75.75 0 00-1.5 0v5.25a1.5 1.5 0 01-1.5 1.5H5.25a1.5 1.5 0 01-1.5-1.5V8.25a1.5 1.5 0 011.5-1.5h5.25a.75.75 0 000-1.5H5.25z" />
                                </svg>
                                <span>Bearbeiten</span>
                            </button>
                        </div>
                    </div>
                `;

                // add the answer element (li) to the ul
                questionUnsortedList.appendChild(answerElement);
            });

            // add the ul element to the container
            questionContainerElement.appendChild(questionUnsortedList);
            
            // return the container
            return questionContainerElement;
        }

        const editQuestionHanlder = async (id) => {
            console.log('[editQuestionHanlder] id:', id);
            const question = questions.get(id);
            console.log('[editQuestionHanlder] question:', question);
            window.location += window.location.toString().endsWith('\/') ? `question/${question.id}`: `/question/${question.id}`;
        }

        const setSubmitting = (id, value) => {
            const inputField = document.getElementById(id);
            const spinner = document.getElementById(id + '-spinner');

            // reset disabled state before checking again
            inputField.removeAttribute('disabled');

            inputField.setAttribute('aria-busy', value);

            if (value === 'true') {
                inputField.setAttribute('disabled', 'true');
                spinner.setAttribute('aria-hidden', 'false');
                return;
            }

            // hide the spinner and text-extension
            spinner.setAttribute('aria-hidden', 'true');
        };

        const deleteQuestion = async (questionId) => {
            const question = questions.get(questionId);

            let deleteResponse;
            try {
                const url = `${window.location.protocol}//${window.location.host}/api/quiz/<%- quizId %>/category/<%- category.id %>/question/${questionId}`;
                console.log(url);
                deleteResponse = await fetch(url, {
                    method: 'DELETE',
                    headers: {
                        "Content-Type": "application/json",
                    },
                });

                const jsonResponse = await deleteResponse?.json();
                const deletedQuestion = jsonResponse?.data;

                if (!deletedQuestion) {
                    alert('Etwas ist schief gelaufen. Mach einen Screenshot und kontaktiere bitte Hussein Amar');
                    return;
                }

                console.log('deletedQuestion', deletedQuestion);
                questions.set(`${deletedQuestion.id}`, undefined);

            } catch (error) {
                console.log('error deleting question:', error);
                return;
            }
        }

        const parseQuestionsFromString = (string) => {
            const parsedQuestions = [];
            const questionsAndAnswers = string?.split('\n\n');

            for (let i = 0; i < questionsAndAnswers?.length; i++) {

                // is a question
                if (i % 2 === 0) {
                    const question = {
                        question: questionsAndAnswers[i]?.slice(questionsAndAnswers[i]?.indexOf('-') + 1)?.trim().replaceAll('\"', '\''),
                        answerPossibilities: [],
                    };
                    parsedQuestions.push(question);
                    continue;
                }

                // is not a question
                const answersUnparsed = questionsAndAnswers[i]?.split('\n');

                if ( !answersUnparsed || answersUnparsed.length === 0 ) {
                    continue;
                }

                for (const choice of answersUnparsed) {
                    const answerTrimmed = choice?.slice(choice?.indexOf('-') + 1)?.trim() ?? choice?.trim();

                    const answer = {
                        value: answerTrimmed?.replace('üëç', '')?.replace('üëçüèº', '')?.replace('‚úÖ', '')?.trim(),
                        isCorrect: answerTrimmed?.includes('üëç') || answerTrimmed?.includes('üëçüèº') || answerTrimmed?.includes('‚úÖÔ∏è'),
                    }
                    parsedQuestions[(i - 1) / 2]?.answerPossibilities?.push(answer);
                }
            }

            return structuredClone(parsedQuestions);
        }

        const handleCreateQuestionsFromImport = async (string) => {
            const questions = parseQuestionsFromString(string);
            console.log(questions);

            for (const question of questions) {
                await importQuestionHandler(question);
            }

            closeImportQuestionsModal();
        }

        setup();
    </script>
</body>

</html>