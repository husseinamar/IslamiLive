<!DOCTYPE html>
<html class="h-full">

<head>
    <title>Quizze | IslamiLive</title>

    <script>
        class ObservableMapChangeEvent extends Event {
            constructor(observable, key, oldValue, newValue) {
                super('change');
                this.observable = observable;
                this.key = key;
                this.oldValue = oldValue;
                this.newValue = newValue;
            }
        }

        class ObservableMap extends Map {
            constructor(iterable) {
                super(iterable);
                this._eventTarget = new EventTarget();
            }

            on(name, listener, options) {
                this._eventTarget.addEventListener(name, listener, options);
            }

            off(name, listener, options) {
                this._eventTarget.addEventListener(name, listener, options);
            }

            delete(key) {
                this._eventTarget.dispatchEvent(new ObservableMapChangeEvent(this, key, this.get(key), undefined));
                super.delete(key);
            }
            set(key, value) {
                this._eventTarget.dispatchEvent(new ObservableMapChangeEvent(this, key, this.get(key), value));
                super.set(key, value);
            }
        }
    </script>
    <link rel="stylesheet" href="/css/style.css">
</head>


<body class="h-full">

    <!-- Begin of Dashboard Layout -->
    <div>
        <!-- Static sidebar for desktop -->
        <div class="hidden lg:fixed lg:inset-y-0 lg:flex lg:w-64 lg:flex-col">
            <!-- Sidebar component, swap this element with another sidebar if you like -->
            <div class="flex min-h-0 flex-1 flex-col border-r border-gray-200 bg-white">
                <div class="flex flex-1 flex-col overflow-y-auto pt-5 pb-4">
                    <div class="flex flex-shrink-0 items-center px-4">
                        <img class="h-8 w-auto mr-3"
                            src="https://tailwindui.com/img/logos/mark.svg?color=indigo&shade=600" alt="Al-Irschad">
                        <span>IslamiLive</span>
                    </div>
                    <nav class="mt-5 flex-1 space-y-1 bg-white px-2">
                        <!-- Current: "bg-gray-100 text-gray-900", Default: "text-gray-600 hover:bg-gray-50 hover:text-gray-900" -->
                        <a href="#"
                            class="bg-gray-100 text-gray-900 group flex items-center rounded-md px-2 py-2 text-sm font-medium">
                            <!-- Current: "text-gray-500", Default: "text-gray-400 group-hover:text-gray-500" -->
                            <svg class="text-gray-400 group-hover:text-gray-500 mr-3 h-6 w-6 flex-shrink-0" fill="none"
                                viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round"
                                    d="M2.25 12.75V12A2.25 2.25 0 014.5 9.75h15A2.25 2.25 0 0121.75 12v.75m-8.69-6.44l-2.12-2.12a1.5 1.5 0 00-1.061-.44H4.5A2.25 2.25 0 002.25 6v12a2.25 2.25 0 002.25 2.25h15A2.25 2.25 0 0021.75 18V9a2.25 2.25 0 00-2.25-2.25h-5.379a1.5 1.5 0 01-1.06-.44z" />
                            </svg>
                            Quiz
                        </a>
                    </nav>
                </div>
                <div class="flex flex-shrink-0 border-t border-gray-200 p-4">
                    <a href="#" class="group block w-full flex-shrink-0">
                        <div class="flex items-center">
                            <div>
                                <img class="inline-block h-9 w-9 rounded-full"
                                    src="https://images.unsplash.com/photo-1635107510862-53886e926b74?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"
                                    alt="">
                            </div>
                            <div class="ml-3">
                                <p class="text-sm font-medium text-gray-700 group-hover:text-gray-900">Al-Irschad</p>
                                <p class="text-xs font-medium text-gray-500 group-hover:text-gray-700">View profile</p>
                            </div>
                        </div>
                    </a>
                </div>
            </div>
        </div>

        <div class="flex flex-1 flex-col lg:pl-64">
            <main class="flex-1">
                <div class="pb-6">
                    <div class="sticky top-0 right-0 flex justify-between flex-1 bg-white mx-auto max-w-7xl py-6 px-4 sm:px-6 lg:px-8">
                        <div class="flex items-center">
                            <div class="flex items-center mr-3 text-xs text-gray-500 cursor-pointer" onClick="event.stopPropagation(); window.location = window.location.href.split('/quiz')[0] + '/quiz';">
                                <svg class="h-5 w-5 text-gray-400 rotate-180"
                                    viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                    <path fill-rule="evenodd"
                                        d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z"
                                        clip-rule="evenodd" />
                                </svg>
                                <span>Zurück</span>
                            </div>
                            <h1 id="page-heading" name="page-heading" class="text-2xl font-semibold text-gray-900">Quiz bearbeiten</h1>
                        </div>
                        <div>
                            <button onClick="renderQuiz()" type="button" class="inline-flex items-center rounded-md ring ring-inset ring-indigo-600 px-3 py-2 text-sm font-semibold text-indigo-600 shadow-sm hover:bg-indigo-500 hover:text-white focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                                <svg class="-ml-0.5 mr-1.5 h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                    <path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z" />
                                </svg>
                                Render
                            </button>
                            <button onClick="createNewCategoryModal()" type="button" class="inline-flex items-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                                <svg class="-ml-0.5 mr-1.5 h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                    <path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z" />
                                </svg>
                                Neue Kategorie
                            </button>
                        </div>
                    </div>
                    <div id="content" class="mx-auto max-w-7xl px-4 pt-5 sm:px-6 lg:px-8">
                        <!-- Start of content -->
                     
                        <!-- End of content -->
                    </div>
                </div>
            </main>
        </div>
    </div>
    <!-- End of Dashboard Layout -->

    <script>
        const contentDiv = document.getElementById('content');
        const categories = new ObservableMap();
        
        categories.on('change', event => {
            if ( !event.newValue ) {
                return;
            }

            console.log(event.newValue);

            const listElement = document.createElement('li');
            listElement.setAttribute('data-list-id', `${event.newValue.id}`);
            listElement.setAttribute('class', 'col-span-1 flex flex-col divide-y divide-gray-200 rounded-lg bg-white text-center shadow');

            listElement.innerHTML = `
                <div class="flex flex-1 flex-col p-8">
                    <!-- <img class="mx-auto h-32 w-32 flex-shrink-0 rounded-full"
                        src="https://place-hold.it/256x256&text=QN&fontsize=32"
                        alt=""> -->
                    <h3 class="mt-6 text-lg font-medium text-gray-900">${event.newValue.name}</h3>
                </div>
                
                <div>
                    <div class="-mt-px flex divide-x divide-gray-200">
                        <div class="flex w-0 flex-1">
                            <button type="button" onclick="alert('Löschen ist noch nicht möglich, bitte stattdessen eine neue Kategorie erstellen und sag Hussein Bescheid welche gelöscht werden soll')"
                                class="relative -mr-px inline-flex w-0 flex-1 items-center justify-center gap-x-3 rounded-bl-lg border border-transparent py-4 text-sm font-semibold text-gray-900">
                                Löschen
                            </button>
                        </div>
                        <div class="-ml-px flex w-0 flex-1">
                            <button type="button" onclick="editCategoryHanlder(this.getAttribute('data-id'))" data-id="${event.newValue.id}"
                                class="relative inline-flex w-0 flex-1 items-center justify-center gap-x-3 rounded-br-lg border border-transparent py-4 text-sm font-semibold text-gray-900">
                                Bearbeiten
                            </button>
                        </div>
                    </div>
                </div>
            `;

            let categoryList = document.getElementById('category-list');

            if ( !categoryList ) {
                categoryList = document.createElement('ul');
                categoryList.setAttribute('id', 'category-list');
                categoryList.setAttribute('role', 'list');
                categoryList.setAttribute('class', 'grid grid-cols-1 gap-6 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4');

                contentDiv.innerHTML = '';
                contentDiv.appendChild(categoryList);
            }

            categoryList.appendChild(listElement);
        })

        const loadQuiz = async () => {
            let fetchResponse;
            try {
                fetchResponse = await fetch(`${window.location.protocol}//${window.location.host}/api/quiz/<%- quizId %>`);

                const jsonResponse = await fetchResponse?.json();
                console.log(jsonResponse)

                const fetchedQuiz = jsonResponse?.data;

                if (!fetchedQuiz || fetchedQuiz.length === 0) {
                    return;
                }

                const pageHeading = document.getElementById("page-heading");
                pageHeading.innerText = fetchedQuiz.name;

                const ul = document.createElement('ul');
                ul.setAttribute('id', 'category-list');
                ul.setAttribute('role', 'list');
                ul.setAttribute('class', 'grid grid-cols-1 gap-6 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4');

                contentDiv.childNodes.forEach( childNode => {
                    childNode.remove();
                });

                contentDiv.appendChild(ul);

                for (const category of fetchedQuiz.categories) {
                    categories.set(`${category.id}`, { ...category });
                }

                return;

            } catch (error) {
                console.log(error);
                return;
            }
        }

        const setup = async () => {
            await loadQuiz();

            if (categories?.size > 0) {
                return;
            }

            contentDiv.innerHTML = `
                        <div id="empty_content" class="mt-[15vh] text-center">
                            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                                <path vector-effect="non-scaling-stroke" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 13h6m-3-3v6m-9 1V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2z" />
                            </svg>
                            <h3 class="mt-2 text-sm font-semibold text-gray-900">Keine Kategorien</h3>
                            <p class="mt-1 text-sm text-gray-500">Starte jetzt mit einer neuen Kategorie.</p>
                            <div class="mt-6">
                                <button onClick="createNewCategoryModal()" type="button" class="inline-flex items-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                                    <svg class="-ml-0.5 mr-1.5 h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                        <path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z" />
                                    </svg>
                                    Neue Kategorie
                                </button>
                            </div>
                        </div>`;
        }

        const createNewCategoryModal = () => {
            const newCategoryModal = document.createElement('div');
            newCategoryModal.setAttribute('id', 'new-category-modal');
            newCategoryModal.setAttribute('name', 'new-category-modal');
            newCategoryModal.setAttribute('class', 'relative z-10');
            newCategoryModal.setAttribute('aria-labelledby', 'modal-title');
            newCategoryModal.setAttribute('role', 'dialog');
            newCategoryModal.setAttribute('aria-modal', 'true');

            const newCategoryModalBackgroundDrop = document.createElement('div');
            newCategoryModalBackgroundDrop.setAttribute('id', 'new-category-modal-background-drop');
            newCategoryModalBackgroundDrop.setAttribute('name', 'new-category-modal-background-drop');
            newCategoryModalBackgroundDrop.setAttribute('class', 'ease-out duration-300 opacity-0 fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity');

            const newCategoryModalPanelMainContainer = document.createElement('div');
            newCategoryModalPanelMainContainer.setAttribute('class', 'fixed inset-0 z-10 overflow-y-auto');

            const newCategoryModalPanelParentContainer = document.createElement('div');
            newCategoryModalPanelParentContainer.setAttribute('class', 'flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0');

            const newCategoryModalPanel = document.createElement('div');
            newCategoryModalPanel.setAttribute('id', 'new-category-modal-panel');
            newCategoryModalPanel.setAttribute('name', 'new-category-modal-panel');
            newCategoryModalPanel.setAttribute('class', 'ease-out duration-300 opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95 relative transform overflow-hidden rounded-lg bg-white px-4 pt-5 pb-4 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6');
            newCategoryModalPanel.innerHTML = `
                <div>
                    <div class="mt-3 text-center sm:mt-5">
                        <h3 class="text-base font-semibold leading-6 text-gray-900"
                            id="modal-title">Neue Kategorie Erstellen</h3>

                        <div class="my-6">
                            <p class="mt-2 text-sm text-gray-500" id="category-name-description">Gib der Kategorie einen Namen</p>
                            <div class="mt-2">
                                <input type="text" name="category-name" id="category-name" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" placeholder="Beispiel Kategorie" aria-describedby="category-name-description">
                            </div>
                        </div>

                    </div>
                </div>

                <div
                    class="mt-5 sm:mt-6 sm:grid sm:grid-flow-row-dense sm:grid-cols-2 sm:gap-3">
                    <button type="button" aria-busy="false" type="button" id="new-category-submit-button" name="new-category-submit-button"
                        class="inline-flex w-full justify-center rounded-md bg-indigo-600 disabled:bg-indigo-400 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 disabled:hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 disabled:cursor-not-allowed sm:col-start-2"
                    >
                        <svg id="new-category-submit-button-spinner" aria-hidden="true" role="status" class="hidden aria-[hidden=false]:inline w-4 h-4 mr-3 text-white animate-spin" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path
                                d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
                                fill="#E5E7EB"
                            />
                            <path
                                d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
                                fill="currentColor"
                            />
                        </svg>
                        Erstellen
                    </button>
                    <button type="button" onclick="closeNewCategoryModal()"
                        class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:col-start-1 sm:mt-0">Abbrechen</button>
                </div>
            `;

            newCategoryModalPanelParentContainer.appendChild(newCategoryModalPanel);
            newCategoryModalPanelMainContainer.appendChild(newCategoryModalPanelParentContainer);

            newCategoryModal.appendChild(newCategoryModalBackgroundDrop);
            newCategoryModal.appendChild(newCategoryModalPanelMainContainer);

            document.body.appendChild(newCategoryModal);

            newCategoryModalPanel.classList.remove('opacity-0', 'translate-y-4', 'sm:translate-y-0', 'sm:scale-95');
            newCategoryModalPanel.classList.add('opacity-100', 'translate-y-0', 'sm:scale-100');

            newCategoryModalBackgroundDrop.classList.remove('opacity-0');
            newCategoryModalBackgroundDrop.classList.add('opacity-100');

            const newCategorySubmitButton = document.getElementById('new-category-submit-button');
            newCategorySubmitButton.addEventListener('click', (e) => {
                e.stopPropagation();
                e.preventDefault();


                if (newCategorySubmitButton.getAttribute('aria-busy') === 'true') {
                    return;
                }

                setSubmitting('new-category-submit-button', 'true');
                createNewCategoryHandler({ name: document.getElementById('category-name')?.value });
            });
        }

        const closeNewCategoryModal = () => {
            const newCategoryModal = document.getElementById('new-category-modal');
            const newCategoryModalPanel = document.getElementById('new-category-modal-panel');
            const newCategoryModalBackgroundDrop = document.getElementById('new-category-modal-background-drop');

            // undo the animations added when creating
            newCategoryModalPanel.classList.remove('ease-out', 'duration-300');
            newCategoryModalPanel.classList.remove('opacity-100', 'translate-y-0', 'sm:scale-100');

            newCategoryModalBackgroundDrop.classList.remove('ease-out', 'duration-300');
            newCategoryModalBackgroundDrop.classList.remove('opacity-100');

            newCategoryModalPanel.classList.add('ease-in', 'duration-200', 'opacity-0', 'translate-y-4', 'sm:translate-y-0', 'sm:scale-95');
            newCategoryModalBackgroundDrop.classList.add('ease-in', 'duration-200', 'opacity-0');

            // newCategoryModalPanel.classList.add('opacity-0', 'translate-y-4', 'sm:translate-y-0', 'sm:scale-95');
            // newCategoryModalBackgroundDrop.classList.add('opacity-0');

            // clean up DOM
            setTimeout(() => newCategoryModal.remove(), 200);
        }

        const createNewCategoryHandler = async (entry) => {
            if (!entry?.name?.trim()) {
                setSubmitting('new-category-submit-button', 'false');
                alert('Gib bitte erst einen Namen für die Kategorie ein!');
                return;
            }

            console.log('creating new category');

            let createResponse;
            try {
                createResponse = await fetch(`${window.location.protocol}//${window.location.host}/api/quiz/<%- quizId %>/category `, {
                    method: 'POST',
                    headers: {
                        "Content-Type": "application/json",
                    },

                    body: JSON.stringify({
                        name: entry.name,
                        questions: [],
                    })
                });

                const jsonResponse = await createResponse?.json();
                const newCategory = jsonResponse?.data;

                if (!newCategory) {
                    alert('Etwas ist schief gelaufen. Mach einen Screenshot und kontaktiere bitte Hussein Amar');
                    return;
                }

                categories.set(`${newCategory.id}`, { ...newCategory });

            } catch (error) {
                console.log(error);
                return;
            }

            closeNewCategoryModal();
        }

        const createQuizElement = async (quiz) => {

        }

        const editCategoryHanlder = async (id) => {
            const category = categories.get(id);
            window.location += window.location.toString().endsWith('\/') ? `category/${category.id}`: `/category/${category.id}`;
        }

        const setSubmitting = (id, value) => {
            const inputField = document.getElementById(id);
            const spinner = document.getElementById(id + '-spinner');

            // reset disabled state before checking again
            inputField.removeAttribute('disabled');

            inputField.setAttribute('aria-busy', value);

            if (value === 'true') {
                inputField.setAttribute('disabled', 'true');
                spinner.setAttribute('aria-hidden', 'false');
                return;
            }

            // hide the spinner and text-extension
            spinner.setAttribute('aria-hidden', 'true');
        };

        const renderQuiz = () => {
            window.open(window.location.href + (window.location.toString().endsWith('\/') ? `rendered`: `/rendered`), '_blank');
        }

        setup();
    </script>
</body>

</html>